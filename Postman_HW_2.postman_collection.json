{
	"info": {
		"_postman_id": "cc652543-bb96-4c40-bb7e-e73da95a22bd",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17624239"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1.Отправить запрос. 2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"//3.Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the \");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL_HW_2}}/first",
					"host": [
						"{{BaseURL_HW_2}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3.Спарсить response body в json\r",
							"let responseJson = pm.response.json();\r",
							"console.log(\"response JSON\", responseJson);\r",
							"\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"The response has user_name\", function() {  \r",
							"    pm.expect(responseJson.name).to.eql(\"Liudmyla\");\r",
							"    console.log(responseJson.name);\r",
							"});\r",
							"\r",
							"//5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"The response has user_age\", function() {\r",
							"    pm.expect(responseJson.age).to.eql(\"44\");\r",
							"    console.log(responseJson.age);\r",
							"});\r",
							" \r",
							"//6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"The response has user_salary\", function() {  \r",
							"    pm.expect(responseJson.salary).to.eql(3000);\r",
							"    console.log(responseJson.salary);\r",
							"}); \r",
							"\r",
							"//7.Спарсить request\r",
							"let requestBody = request.data;\r",
							"console.log(\"requestBody\", requestBody);\r",
							"\r",
							"//8.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from responce to eql name from request\", function() {\r",
							"        pm.expect(responseJson.name).to.eql(requestBody.name);\r",
							"});\r",
							"\r",
							"//9.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from responce to eql age from request\", function() {\r",
							"        pm.expect(responseJson.age).to.eql(requestBody.age);\r",
							"});  \r",
							"\r",
							"//10.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from responce to eql salary from request\", function() {\r",
							"        pm.expect(responseJson.salary).to.eql(+requestBody.salary);\r",
							"});\r",
							"\r",
							"//11.Вывести в консоль параметр family из response\r",
							"console.log(\"responseJson.family\", responseJson.family);\r",
							"\r",
							"//12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary = responseJson.family.u_salary_1_5_year;\r",
							"console.log(\"u_salary_1_5_year = \", u_salary);\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year from responce to eql salary from request *4\", function(){\r",
							"        pm.expect(u_salary).to.eql(requestBody.salary * 4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Liudmyla",
							"type": "text"
						},
						{
							"key": "age",
							"value": "44",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL_HW_2}}/user_info_3",
					"host": [
						"{{BaseURL_HW_2}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос. 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json\r",
							"let responseJson = pm.response.json();\r",
							"console.log(\"responseJson\", responseJson);\r",
							"\r",
							"//4.Спарсить request\r",
							"let requestParams = pm.request.url.query;\r",
							"console.log(\"requestParams (url query)\", requestParams);\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from response to eql name from request\", function(){\r",
							"        requestParams.each(function(param) {\r",
							"            if (param.key === \"name\") {\r",
							"                reqParamName = param.value;\r",
							"                console.log(\"name from response\", reqParamName);\r",
							"            }\r",
							"        });\r",
							"        pm.expect(responseJson.name).to.eql(reqParamName);\r",
							"});\r",
							"\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from response to eql age from request\", function(){\r",
							"        requestParams.each(function(param) {\r",
							"            if (param.key === \"age\") {\r",
							"                reqParamAge = param.value;\r",
							"                console.log(\"age from request \", reqParamAge);\r",
							"            }\r",
							"        });\r",
							"        pm.expect(+responseJson.age).to.eql(+reqParamAge);\r",
							"});\r",
							"\r",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from response to eql salary from request\", function(){\r",
							"        requestParams.each(function(param) {\r",
							"            if (param.key === \"salary\") {\r",
							"                reqParamSalary = param.value;\r",
							"                console.log(\"salary from request \", reqParamSalary);\r",
							"            }\r",
							"        });\r",
							"        pm.expect(responseJson.salary).to.eql(+reqParamSalary);\r",
							"});\r",
							"\r",
							"//8.Вывести в консоль параметр family из response\r",
							"console.log(\"responseJson.family\", responseJson.family);\r",
							"\r",
							"//9.Проверить, что у параметра dog есть параметр name\r",
							"let Dog = responseJson.family.pets.dog;\r",
							"\r",
							"pm.test(\"Dog has param name \", function () {\r",
							"    pm.expect(Dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10.Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has param age \", function () {\r",
							"    pm.expect(Dog).to.have.any.keys('age');\r",
							"});\r",
							"\r",
							"//11.Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Dog has value Luky\", function () {\r",
							"    //pm.expect(Dog).to.have.property('name', \"Luky\");\r",
							"    pm.expect(Dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//12.Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Dog has value 4 \", function () {\r",
							"    //pm.expect(Dog).to.have.property('age', 4);\r",
							"    pm.expect(Dog.age).to.eql(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL_HW_2}}/object_info_3?name=Liudmyla&age=44&salary=3000",
					"host": [
						"{{BaseURL_HW_2}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Liudmyla"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"console.log(\"response Json\", responseJson);\r",
							"\r",
							"//4. Спарсить request.\r",
							"let requestParams = pm.request.url.query;\r",
							"console.log(\"request Params\", requestParams);\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response to eql name request\", function () {\r",
							"    requestParams.each(function (param) {\r",
							"        if (param.key === \"name\") {\r",
							"            reqParamName = param.value;\r",
							"            console.log(\"name from request\", reqParamName);\r",
							"        }\r",
							"    });\r",
							"    pm.expect(responseJson.name).to.eql(reqParamName);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age response to eql age request\", function () {\r",
							"    requestParams.each(function (param) {\r",
							"        if (param.key === \"age\") {\r",
							"            reqParamAge = param.value;\r",
							"            console.log(\"age from request\", reqParamAge);\r",
							"        }\r",
							"    });\r",
							"    pm.expect(responseJson.age).to.eql(+reqParamAge);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"let requestObj = pm.request.url.query.toObject()\r",
							"console.log(requestObj);\r",
							"\r",
							"let requestObjSalary = requestObj.salary;\r",
							"console.log(\"Salary from request in console\", requestObjSalary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"let responseSalary = responseJson.salary;\r",
							"console.log(\"salary from response in console\", responseSalary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Output the 0th element of the salary parameter from the response to the console\", responseSalary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Output the 1th element of the salary parameter from the response to the console\", responseSalary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Output the 2th element of the salary parameter from the response to the console\", responseSalary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0th element of the salary parameter from the response eql salary from request\", function () {\r",
							"    pm.expect(responseSalary[0]).to.eql(+requestObjSalary);\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1th element of the salary parametr from the response eql salary * 2 from request\", function () {\r",
							"    pm.expect(+responseSalary[1]).to.eql(+requestObjSalary * 2);\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2th element of the salary parametr from the response eql salary * 3 from request\", function () {\r",
							"    pm.expect(+responseSalary[2]).to.eql(+requestObjSalary * 3);\r",
							"})\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", responseJson.name);\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", responseJson.age);\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", responseJson.salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let arrSal = responseJson.salary.length;\r",
							"console.log(arrSal);\r",
							"for (let i = 0; i < arrSal; i++) {\r",
							"console.log( responseJson.salary[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL_HW_2}}/object_info_4?name=Liudmyla&age=44&salary=3000",
					"host": [
						"{{BaseURL_HW_2}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Liudmyla"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requestBody = request.data;\r",
							"console.log(requestBody);\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response has start_qa_salary parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response has qa_salary_after_6_months parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response has qa_salary_after_12_months parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response has qa_salary_after_1.5_year parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response has qa_salary_after_3.5_years parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response has person parametr\", function () {\r",
							"    pm.expect(responseJson).to.any.keys(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary parametr to eql salary from request\", function() {\r",
							"    pm.expect(+responseJson.start_qa_salary).to.eql(+requestBody.salary);\r",
							"})\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months parametr to eql salary*2 from request\", function() {\r",
							"    pm.expect(+responseJson.qa_salary_after_6_months).to.eql(+requestBody.salary * 2);\r",
							"})\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months parametr to eql salary*2.7 from request\", function() {\r",
							"    pm.expect(+responseJson.qa_salary_after_12_months).to.eql(+requestBody.salary * 2.7);\r",
							"})\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year parametr to eql salary*3.3 from request\", function() {\r",
							"    pm.expect(+responseJson[\"qa_salary_after_1.5_year\"]).to.eql(+requestBody.salary * 3.3);\r",
							"})\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years parametr to eql salary*3.8 from request\", function() {\r",
							"    pm.expect(+responseJson[\"qa_salary_after_3.5_years\"]).to.eql(+requestBody.salary * 3.8);\r",
							"})\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person parametr 1th element from u_name to eql salary from request\", function() {\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(+requestBody.salary);\r",
							"})\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age parametr response to eql age from request\", function() {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(+requestBody.age);\r",
							"})\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years parametr response to eql salary*4.2 from request\", function() {\r",
							"    pm.expect(responseJson.person.u_salary_5_years).to.eql(+requestBody.salary * 4.2);\r",
							"})\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let arrPerson = responseJson.person.u_name.length;\r",
							"console.log(arrPerson);\r",
							"for (let i = 0; i < arrPerson; i++) {\r",
							"console.log( responseJson.person.u_name[i])\r",
							"}\r",
							"\r",
							"let cycle = JSON.parse(responseBody);\r",
							"console.log(cycle);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL_HW_2}}/user_info_2",
					"host": [
						"{{BaseURL_HW_2}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL_HW_2",
			"value": "http://162.55.220.72:5006"
		},
		{
			"key": "name",
			"value": "Liudmyla",
			"type": "string"
		}
	]
}